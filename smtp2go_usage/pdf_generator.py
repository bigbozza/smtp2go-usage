"""PDF Generator for SMTP2GO usage reports.

This module handles creation of PDF reports from processed usage data.
"""
import os
import io
import logging
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)

class PDFGenerator:
    """Generate PDF reports from SMTP2GO usage data."""
    
    def __init__(self, output_dir=None):
        """Initialize the PDF generator.
        
        Args:
            output_dir (str, optional): Directory to save generated PDF files
        """
        self.output_dir = output_dir or os.getcwd()
        os.makedirs(self.output_dir, exist_ok=True)
    
    def generate_report(self, report_data):
        """Generate a PDF report from the provided data.
        
        Args:
            report_data (dict): Processed report data from DataProcessor
            
        Returns:
            str: Path to the generated PDF file
        """
        period = report_data['report_period']['formatted']
        filename = f"smtp2go_usage_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.output_dir, filename)
        
        # Create PDF with matplotlib
        with PdfPages(filepath) as pdf:
            # Create summary page
            self._create_summary_page(pdf, report_data)
            
            # Create detailed user page
            self._create_user_details_page(pdf, report_data)
            
            # Create charts page
            self._create_charts_page(pdf, report_data)
        
        logger.info(f"Generated PDF report: {filepath}")
        return filepath
    
    def _create_summary_page(self, pdf, report_data):
        """Create the summary page of the report.
        
        Args:
            pdf (PdfPages): PdfPages object to add pages to
            report_data (dict): Report data to include in the summary
        """
        fig, ax = plt.subplots(figsize=(8.5, 11))
        ax.axis('off')
        
        # Title
        period = report_data['report_period']['formatted']
        plt.suptitle(f"SMTP2GO Monthly Usage Report", fontsize=16, y=0.98)
        plt.title(f"Report Period: {period}", fontsize=12, y=1.01)
        
        # Summary statistics
        summary = report_data['summary']
        
        # Make sure users exists and handle empty list gracefully
        users = report_data.get('users', [])
        if not users:
            logger.warning("No user data available for summary page")
            
        total_users = summary.get('total_users', len(users))
        
        text = [
            f"Report Generated: {report_data['generated_at'].strftime('%Y-%m-%d %H:%M:%S')}",
            "\nSummary:",
            f"Total Emails Sent: {summary['total_sent']:,}",
            f"Total Emails Delivered: {summary['total_delivered']:,}",
            f"Total Emails Failed: {summary['total_failed']:,}",
            f"Overall Delivery Rate: {summary['delivery_rate']:.2f}%",
            f"\nNumber of Users: {total_users}"
        ]
        
        plt.text(0.1, 0.85, "\n".join(text), fontsize=10)
        
        # Add top 5 users table
        top_users = users[:5] if len(users) > 5 else users
        
        if top_users:
            plt.text(0.1, 0.7, "Top Users by Email Volume:", fontsize=12)
            data = [
                ["Username", "Emails Sent", "Delivery Rate"]
            ]
            for user in top_users:
                data.append([
                    user.get('username', 'Unknown')[:25] + (user.get('username', 'Unknown')[25:] and '...'),
                    f"{user['sent']:,}",
                    f"{user['delivery_rate']:.2f}%"
                ])
            
            table = plt.table(
                cellText=data,
                loc='center',
                cellLoc='center',
                bbox=[0.1, 0.4, 0.8, 0.25]
            )
            table.auto_set_font_size(False)
            table.set_fontsize(9)
            table.scale(1, 1.5)
            
            # Style the header row
            for i, cell in enumerate(table._cells[(0, i)] for i in range(len(data[0]))):
                cell.set_facecolor('#4472C4')
                cell.set_text_props(color='white')
        
        # Add footer
        plt.text(0.1, 0.1, "This report was automatically generated by the SMTP2GO Monthly Usage Reporter.", fontsize=8)
        
        pdf.savefig(fig)
        plt.close()
    
    def _create_user_details_page(self, pdf, report_data):
        """Create the detailed user page of the report.
        
        Args:
            pdf (PdfPages): PdfPages object to add pages to
            report_data (dict): Report data to include in the details
        """
        fig, ax = plt.subplots(figsize=(8.5, 11))
        ax.axis('off')
        
        users = report_data['users']
        page_title = "User Details"
        
        plt.suptitle(page_title, fontsize=14, y=0.98)
        
        if not users:
            plt.text(0.5, 0.5, "No user data available", fontsize=12, ha='center')
            pdf.savefig(fig)
            plt.close()
            return
        
        # Prepare data for table
        data = [
            ["Username", "Email", "Emails Sent", "Delivered", "Failed", "Delivery Rate"]
        ]
        
        for user in users:
            data.append([
                user.get('username', 'Unknown')[:20] + (user.get('username', 'Unknown')[20:] and '...'),
                user.get('email', '')[:20] + (user.get('email', '')[20:] and '...'),
                f"{user['sent']:,}",
                f"{user['delivered']:,}",
                f"{user['failed']:,}",
                f"{user['delivery_rate']:.2f}%"
            ])
        
        # Create table with pagination
        rows_per_page = 20
        total_pages = (len(users) // rows_per_page) + 1
        
        for page in range(total_pages):
            if page > 0:
                fig, ax = plt.subplots(figsize=(8.5, 11))
                ax.axis('off')
                plt.suptitle(f"{page_title} (Page {page+1}/{total_pages})", fontsize=14, y=0.98)
            
            start_idx = page * rows_per_page
            end_idx = min(start_idx + rows_per_page, len(users) + 1)  # +1 for header
            
            page_data = [data[0]] + data[start_idx+1:end_idx+1]
            
            table = plt.table(
                cellText=page_data,
                loc='center',
                cellLoc='center',
                bbox=[0.05, 0.1, 0.9, 0.8]
            )
            table.auto_set_font_size(False)
            table.set_fontsize(8)
            table.scale(1, 1.5)
            
            # Style the header row
            for i, cell in enumerate(table._cells[(0, i)] for i in range(len(data[0]))):
                cell.set_facecolor('#4472C4')
                cell.set_text_props(color='white')
            
            pdf.savefig(fig)
            plt.close()
    
    def _create_charts_page(self, pdf, report_data):
        """Create charts page with visualizations.
        
        Args:
            pdf (PdfPages): PdfPages object to add pages to
            report_data (dict): Report data to include in charts
        """
        fig = plt.figure(figsize=(8.5, 11))
        plt.suptitle("Usage Visualizations", fontsize=14, y=0.98)
        
        users = report_data['users']
        
        if not users:
            ax = fig.add_subplot(111)
            ax.axis('off')
            plt.text(0.5, 0.5, "No data available for visualization", fontsize=12, ha='center')
            pdf.savefig(fig)
            plt.close()
            return
        
        # Top 10 users by email volume
        top10 = users[:10] if len(users) > 10 else users
        
        # Volume chart
        ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)
        names = [user.get('username', 'Unknown')[:15] + (user.get('username', 'Unknown')[15:] and '...') for user in top10]
        sent = [user['sent'] for user in top10]
        
        bars = ax1.bar(names, sent, color='#4472C4')
        ax1.set_title('Top Users by Email Volume')
        ax1.set_ylabel('Emails Sent')
        ax1.tick_params(axis='x', rotation=45)
        
        # Add values on top of bars
        for bar in bars:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 5,
                    f'{height:,}', ha='center', va='bottom', fontsize=8)
        
        # Delivery rate chart
        ax2 = plt.subplot2grid((2, 2), (1, 0))
        names = [user.get('username', 'Unknown')[:10] + (user.get('username', 'Unknown')[10:] and '...') for user in top10]
        rates = [user['delivery_rate'] for user in top10]
        
        bars = ax2.bar(names, rates, color='#4472C4')
        ax2.set_title('Delivery Rates by User')
        ax2.set_ylabel('Delivery Rate (%)')
        ax2.set_ylim(0, 100)
        ax2.tick_params(axis='x', rotation=45)
        
        # Add values on top of bars
        for bar in bars:
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{height:.1f}%', ha='center', va='bottom', fontsize=8)
        
        # Pie chart of successful vs failed emails
        ax3 = plt.subplot2grid((2, 2), (1, 1))
        summary = report_data['summary']
        delivered = summary['total_delivered']
        failed = summary['total_failed']
        
        ax3.pie([delivered, failed], 
                labels=['Delivered', 'Failed'],
                autopct='%1.1f%%',
                colors=['#4472C4', '#ED7D31'],
                startangle=90)
        ax3.set_title('Email Delivery Status')
        
        plt.tight_layout(rect=[0, 0, 1, 0.95])
        pdf.savefig(fig)
        plt.close()

    def generate_report_to_bytes(self, report_data):
        """Generate a PDF report as bytes instead of saving to a file.
        
        Args:
            report_data (dict): Processed report data from DataProcessor
            
        Returns:
            bytes: The generated PDF as bytes
        """
        buffer = io.BytesIO()
        
        # Create PDF with matplotlib
        with PdfPages(buffer) as pdf:
            # Create summary page
            self._create_summary_page(pdf, report_data)
            
            # Create detailed user page
            self._create_user_details_page(pdf, report_data)
            
            # Create charts page
            self._create_charts_page(pdf, report_data)
        
        buffer.seek(0)
        return buffer.getvalue()